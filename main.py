#doc para hacer pruebas
from usuario import registrar_usuario, iniciar_sesion_db, actualizar_correo_usuario, actualizar_contrase√±a_usuario, actualizar_nombre_usuario, obtener_datos_usuario
from pareja import crear_pareja
from movimientos import (
    registrar_movimiento_DB, 
    obtener_resumen_financiero, 
    registrar_movimiento_recurrente_DB, 
    obtener_movimientos_recurrentes,
    verificar_movimientos_pendientes,
    aprobar_movimiento_recurrente,
    rechazar_movimiento_recurrente,
    obtener_historial_movimientos,
    obtener_categorias_usuario
)
from datetime import datetime

#En esta funcion se encuentra la pantalla principal del progra,a
def pantalla_inicio():
    while True:
        print("\n=== Bienvenido a Finanzas en Pareja üí∞‚ù§Ô∏è ===")
        print("1. Registrarme")
        print("2. Iniciar sesi√≥n")
        print("3. Salir")

        opcion = input("Selecciona una opci√≥n: ")

        if opcion == "1":
            menu_registro_usuarios()
        elif opcion == "2":
            usuario = iniciar_sesion()
            if usuario:
                print(f"üåü ¬°Bienvenido {usuario['nombre']}!")
                return usuario
        elif opcion == "3":
            print("üëã Hasta luego.")
            break
        else:
            print("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")

#En esta funcion se encuentra el menu de navegacion cuando el usuario ingrese
def menu_principal(usuario):
    while True:
        # Verificar movimientos pendientes
        pendientes = verificar_movimientos_pendientes(usuario['id'])
        if pendientes['hay_pendientes']:
            print("\n‚ö†Ô∏è Tienes movimientos recurrentes pendientes de aprobaci√≥n!")
            print(f"Total pendientes: {pendientes['total']}")
            print("\nMovimientos pendientes:")
            for mov in pendientes['movimientos']:
                print(f"  - {mov}")
            print("\nRevisa la opci√≥n 'Ver movimientos recurrentes' para gestionarlos.")
        
        # Obtener resumen financiero
        resumen = obtener_resumen_financiero(usuario['id'])
        
        if resumen:
            print("\n=== üìä Resumen Financiero del Mes ===")
            print(f"üí∞ Ingresos: ${resumen['ingresos']:,.2f}")
            print(f"üí∏ Gastos: ${resumen['gastos']:,.2f}")
            print(f"üíµ Balance: ${resumen['balance']:,.2f}")
            print("=" * 40)

        print(f'\n=== Bienvenido {usuario["nombre"]} Men√∫ Principal ===')
        print("1. Registrar movimiento")
        print("2. Registrar movimiento recurrente")
        print("3. Ver movimientos recurrentes")
        print("4. Ver historial de movimientos")
        print("5. Configuraci√≥n de perfil")
        print("6. Salir")

        opcion = input("Selecciona una opci√≥n: ")

        if opcion == "1":
            registrar_movimiento(usuario)
        elif opcion == "2":
            registrar_movimiento_recurrente(usuario)
        elif opcion == "3":
            ver_movimientos_recurrentes(usuario)
        elif opcion == "4":
            ver_historial_movimientos(usuario)
        elif opcion == "5":
            menu_configuracion(usuario)
        elif opcion == "6":
            print("üëã Hasta luego")
            break
        else:
            print("‚ùå Opci√≥n inv√°lida, intenta de nuevo.")

#funcion para iniciar sesion de usuario
def iniciar_sesion():
    while True:
        print("\n=== Inicio de Sesi√≥n ===")
        correo = input("Correo: ").strip()
        contrase√±a = input("Contrase√±a: ").strip()

        usuario = iniciar_sesion_db(correo, contrase√±a)

        if usuario:
            return usuario
        
        opcion = input("\n¬øDeseas intentar de nuevo? (s√≠/no): ").strip().lower()
        if opcion != 'si':
            print("üëã Volviendo al men√∫ principal.")
            return None

#Funcion para realizar registro de usuarios
def menu_registro_usuarios():  
    while True:  # Ciclo que se repite hasta que el usuario decida salir
        print("\n=== Registro de Usuario ===")  # T√≠tulo para identificar el men√∫

        nombre = input("Nombre: ").strip()  # Pedimos el nombre y eliminamos espacios extras
        correo = input("Correo: ").strip()  # Pedimos el correo y eliminamos espacios extras
        
        # Validaci√≥n del formato del correo
        if '@' not in correo:
            print("‚ùå El correo debe contener el car√°cter '@'. Por favor, ingresa un correo v√°lido.")
            continue  # Vuelve al inicio del ciclo para pedir el correo nuevamente
            
        # Validaci√≥n de la contrase√±a
        contrase√±a = input("Contrase√±a: ").strip()  # Pedimos la contrase√±a y eliminamos espacios extras
        confirmar_contrase√±a = input("Confirma tu contrase√±a: ").strip()  # Pedimos confirmaci√≥n de la contrase√±a
        
        if contrase√±a != confirmar_contrase√±a:
            print("‚ùå Las contrase√±as no coinciden. Por favor, int√©ntalo de nuevo.")
            continue  # Vuelve al inicio del ciclo

        # Validamos que ning√∫n campo est√© vac√≠o
        if not nombre or not correo or not contrase√±a:
            print("‚ùå Todos los campos son obligatorios. Intenta de nuevo.")  # Mensaje de error si falta algo
            continue  # Vuelve al inicio del ciclo

        # Registramos el usuario en la base de datos
        if registrar_usuario(nombre, correo, contrase√±a):  # Si el registro fue exitoso
            print("‚úÖ Usuario registrado con √©xito.")
            return

        crear_otro = input("¬øTe gustar√≠a crear otro usuario? (s√≠/no): ").strip().lower()  
        # Preguntamos si quiere crear otro usuario, quitamos espacios y pasamos todo a min√∫sculas

        if crear_otro == 'no':  # Si escribe "no", salimos del men√∫
            print("üëã Saliste de la creaci√≥n de usuarios.")  # Mensaje de despedida
            return

#Funci√≥n para registrar movimientos en el app
def registrar_movimiento(usuario):
    print("\n=== Registro de Movimiento ===")
    
    # Obtener la fecha actual``
    fecha_actual = datetime.now().strftime('%Y-%m-%d')
    print(f"\nFecha del movimiento: {fecha_actual}")
    
    # Validaci√≥n de categor√≠a
    while True:
        categoria = input("Categor√≠a (Ej: Comida, Transporte, Salario, etc.): ").strip()
        if categoria and len(categoria) <= 50:  # Validar que no est√© vac√≠o y tenga longitud razonable
            break
        print("‚ùå La categor√≠a no puede estar vac√≠a y debe tener m√°ximo 50 caracteres.")
    
    # Validaci√≥n de monto
    while True:
        try:
            monto = float(input("Monto: "))
            if monto > 0:  # Validar que el monto sea positivo
                break
            print("‚ùå El monto debe ser un n√∫mero positivo.")
        except ValueError:
            print("‚ùå Por favor, ingresa un n√∫mero v√°lido.")
    
    # Men√∫ para seleccionar tipo de movimiento con validaci√≥n
    while True:
        print("\nSelecciona el tipo de movimiento:")
        print("1. Ingreso")
        print("2. Gasto")
        
        try:
            opcion = int(input("Opci√≥n (1-2): "))
            if opcion in [1, 2]:
                tipo = "Ingreso" if opcion == 1 else "Gasto"
                break
            print("‚ùå Opci√≥n inv√°lida. Debe ser 1 o 2.")
        except ValueError:
            print("‚ùå Debes ingresar un n√∫mero (1 o 2).")
    
    # Validaci√≥n de descripci√≥n
    while True:
        descripcion = input("Descripci√≥n del movimiento: ").strip()
        if descripcion and len(descripcion) <= 200:  # Validar que no est√© vac√≠o y tenga longitud razonable
            break
        print("‚ùå La descripci√≥n no puede estar vac√≠a y debe tener m√°ximo 200 caracteres.")

    # Confirmaci√≥n del movimiento
    print("\n=== Resumen del Movimiento ===")
    print(f"Fecha: {fecha_actual}")
    print(f"Categor√≠a: {categoria}")
    print(f"Monto: ${monto:,.2f}")
    print(f"Tipo: {tipo}")
    print(f"Descripci√≥n: {descripcion}")
    
    confirmar = input("\n¬øConfirmar el registro de este movimiento? (si/no): ").strip().lower()
    
    if confirmar == 'si':
        if registrar_movimiento_DB(usuario['id'], None, fecha_actual, categoria, monto, tipo, descripcion):
            print("‚úÖ Movimiento registrado exitosamente.")
        else:
            print("‚ùå Error al registrar el movimiento.")
    else:
        print("‚ùå Registro cancelado.")

def registrar_movimiento_recurrente(usuario):
    print("\n=== Registro de Movimiento Recurrente ===")
    
    # Validaci√≥n de categor√≠a
    while True:
        categoria = input("Categor√≠a (Ej: Comida, Transporte, Salario, etc.): ").strip()
        if categoria and len(categoria) <= 50:
            break
        print("‚ùå La categor√≠a no puede estar vac√≠a y debe tener m√°ximo 50 caracteres.")
    
    # Validaci√≥n de monto
    while True:
        try:
            monto = float(input("Monto: "))
            if monto > 0:
                break
            print("‚ùå El monto debe ser un n√∫mero positivo.")
        except ValueError:
            print("‚ùå Por favor, ingresa un n√∫mero v√°lido.")
    
    # Men√∫ para seleccionar tipo de movimiento
    while True:
        print("\nSelecciona el tipo de movimiento:")
        print("1. Ingreso")
        print("2. Gasto")
        
        try:
            opcion = int(input("Opci√≥n (1-2): "))
            if opcion in [1, 2]:
                tipo = "Ingreso" if opcion == 1 else "Gasto"
                break
            print("‚ùå Opci√≥n inv√°lida. Debe ser 1 o 2.")
        except ValueError:
            print("‚ùå Debes ingresar un n√∫mero (1 o 2).")
    
    # Validaci√≥n de descripci√≥n
    while True:
        descripcion = input("Descripci√≥n del movimiento: ").strip()
        if descripcion and len(descripcion) <= 200:
            break
        print("‚ùå La descripci√≥n no puede estar vac√≠a y debe tener m√°ximo 200 caracteres.")

    # Validaci√≥n de frecuencia
    while True:
        print("\nSelecciona la frecuencia:")
        print("1. Diario")
        print("2. Semanal")
        print("3. Mensual")
        
        try:
            opcion = int(input("Opci√≥n (1-3): "))
            if opcion in [1, 2, 3]:
                frecuencias = {1: "diario", 2: "semanal", 3: "mensual"}
                frecuencia = frecuencias[opcion]
                break
            print("‚ùå Opci√≥n inv√°lida. Debe ser 1, 2 o 3.")
        except ValueError:
            print("‚ùå Debes ingresar un n√∫mero (1, 2 o 3).")

    # Validaci√≥n de fecha de registro
    while True:
        try:
            fecha_registro = input("Fecha de registro (YYYY-MM-DD): ").strip()
            fecha_registro_dt = datetime.strptime(fecha_registro, '%Y-%m-%d')
            fecha_actual = datetime.now()
            
            if fecha_registro_dt < fecha_actual:
                print("‚ùå La fecha de registro no puede ser en el pasado.")
                continue
                
            break
        except ValueError:
            print("‚ùå Formato de fecha inv√°lido. Usa YYYY-MM-DD")

    # Validaci√≥n de fecha fin
    while True:
        try:
            fecha_fin = input("Fecha de finalizaci√≥n (YYYY-MM-DD): ").strip()
            fecha_fin_dt = datetime.strptime(fecha_fin, '%Y-%m-%d')
            
            if fecha_fin_dt <= fecha_registro_dt:
                print("‚ùå La fecha de finalizaci√≥n debe ser posterior a la fecha de registro.")
                continue
                
            break
        except ValueError:
            print("‚ùå Formato de fecha inv√°lido. Usa YYYY-MM-DD")

    # Confirmaci√≥n del movimiento
    print("\n=== Resumen del Movimiento Recurrente ===")
    print(f"Categor√≠a: {categoria}")
    print(f"Monto: ${monto:,.2f}")
    print(f"Tipo: {tipo}")
    print(f"Descripci√≥n: {descripcion}")
    print(f"Frecuencia: {frecuencia}")
    print(f"Fecha de registro: {fecha_registro}")
    print(f"Fecha de finalizaci√≥n: {fecha_fin}")
    
    while True:
        confirmar = input("\n¬øConfirmar el registro de este movimiento recurrente? (si/no): ").strip().lower()
        if confirmar in ['si', 'no']:
            break
        print("‚ùå Por favor, responde con 'si' o 'no'.")
    
    if confirmar == 'si':
        if registrar_movimiento_recurrente_DB(usuario['id'], categoria, monto, tipo, descripcion, frecuencia, fecha_registro, fecha_fin):
            print("‚úÖ Movimiento recurrente registrado con √©xito.")
        else:
            print("‚ùå No se pudo registrar el movimiento recurrente.")
    else:
        print("‚ùå Registro cancelado.")

def ver_movimientos_recurrentes(usuario):
    print("\n=== Movimientos Recurrentes Pendientes ===")
    movimientos = obtener_movimientos_recurrentes(usuario['id'])
    
    if movimientos:
        for mov in movimientos:
            print(f"\nID: {mov[0]}")
            print(f"Categor√≠a: {mov[1]}")
            print(f"Monto: ${mov[2]:,.2f}")
            print(f"Tipo: {mov[3]}")
            print(f"Descripci√≥n: {mov[4]}")
            print(f"Frecuencia: {mov[5]}")
            print(f"Fecha programada: {mov[6]}")
            print(f"Fecha de finalizaci√≥n: {mov[7]}")
            print(f"Estado: {mov[8]}")
            print("-" * 40)
            
            # Si el movimiento est√° pendiente, ofrecer opciones
            if mov[8] == 'pendiente':
                while True:
                    print("\n¬øQu√© deseas hacer con este movimiento?")
                    print("1. Aprobar y registrar (se registrar√° con la fecha actual)")
                    print("2. Rechazar")
                    print("3. Posponer")
                    
                    try:
                        opcion = int(input("Opci√≥n (1-3): "))
                        if opcion == 1:
                            if aprobar_movimiento_recurrente(mov[0]):
                                break
                        elif opcion == 2:
                            if rechazar_movimiento_recurrente(mov[0]):
                                break
                        elif opcion == 3:
                            print("Movimiento pospuesto para revisi√≥n posterior.")
                            break
                        else:
                            print("‚ùå Opci√≥n inv√°lida. Debe ser 1, 2 o 3.")
                    except ValueError:
                        print("‚ùå Por favor, ingresa un n√∫mero v√°lido (1, 2 o 3).")
    else:
        print("No hay movimientos recurrentes pendientes.")

def ver_historial_movimientos(usuario):
    print("\n=== Historial de Movimientos ===")
    
    # Obtener categor√≠as disponibles
    categorias = obtener_categorias_usuario(usuario['id'])
    
    # Inicializar filtros
    filtros = {}
    
    # Men√∫ de filtros
    while True:
        print("\nOpciones de filtro:")
        print("1. Filtrar por tipo de movimiento")
        print("2. Filtrar por rango de montos")
        print("3. Filtrar por rango de fechas")
        print("4. Filtrar por categor√≠a")
        print("5. Aplicar filtros y ver resultados")
        print("6. Limpiar filtros")
        print("7. Volver al men√∫ principal")
        
        try:
            opcion = int(input("\nSelecciona una opci√≥n (1-7): "))
            
            if opcion == 1:
                print("\nSelecciona el tipo de movimiento:")
                print("1. Ingresos")
                print("2. Gastos")
                print("3. Ambos")
                tipo_opcion = int(input("Opci√≥n (1-3): "))
                if tipo_opcion == 1:
                    filtros['tipo'] = 'Ingreso'
                elif tipo_opcion == 2:
                    filtros['tipo'] = 'Gasto'
                elif tipo_opcion == 3:
                    filtros.pop('tipo', None)
            
            elif opcion == 2:
                print("\nFiltrar por rango de montos:")
                try:
                    monto_min = float(input("Monto m√≠nimo (dejar vac√≠o para no filtrar): ") or 0)
                    monto_max = float(input("Monto m√°ximo (dejar vac√≠o para no filtrar): ") or float('inf'))
                    filtros['monto_min'] = monto_min
                    filtros['monto_max'] = monto_max
                except ValueError:
                    print("‚ùå Por favor, ingresa montos v√°lidos.")
            
            elif opcion == 3:
                print("\nFiltrar por rango de fechas (YYYY-MM-DD):")
                fecha_inicio = input("Fecha inicial (dejar vac√≠o para no filtrar): ").strip()
                fecha_fin = input("Fecha final (dejar vac√≠o para no filtrar): ").strip()
                
                if fecha_inicio:
                    try:
                        datetime.strptime(fecha_inicio, '%Y-%m-%d')
                        filtros['fecha_inicio'] = fecha_inicio
                    except ValueError:
                        print("‚ùå Formato de fecha inicial inv√°lido.")
                
                if fecha_fin:
                    try:
                        datetime.strptime(fecha_fin, '%Y-%m-%d')
                        filtros['fecha_fin'] = fecha_fin
                    except ValueError:
                        print("‚ùå Formato de fecha final inv√°lido.")
            
            elif opcion == 4:
                if categorias:
                    print("\nCategor√≠as disponibles:")
                    for i, cat in enumerate(categorias, 1):
                        print(f"{i}. {cat}")
                    try:
                        cat_opcion = int(input("\nSelecciona una categor√≠a (0 para no filtrar): "))
                        if 0 < cat_opcion <= len(categorias):
                            filtros['categoria'] = categorias[cat_opcion - 1]
                        elif cat_opcion == 0:
                            filtros.pop('categoria', None)
                    except ValueError:
                        print("‚ùå Por favor, ingresa un n√∫mero v√°lido.")
                else:
                    print("No hay categor√≠as disponibles.")
            
            elif opcion == 5:
                # Mostrar movimientos con filtros actuales
                movimientos = obtener_historial_movimientos(usuario['id'], filtros)
                if movimientos:
                    print("\n=== Resultados ===")
                    print(f"Total de movimientos: {len(movimientos)}")
                    print("\nDetalles:")
                    for mov in movimientos:
                        print(f"\nID: {mov[0]}")
                        print(f"Fecha: {mov[1]}")
                        print(f"Categor√≠a: {mov[2]}")
                        print(f"Monto: ${mov[3]:,.2f}")
                        print(f"Tipo: {mov[4]}")
                        print(f"Descripci√≥n: {mov[5]}")
                        print("-" * 40)
                else:
                    print("\nNo se encontraron movimientos con los filtros actuales.")
            
            elif opcion == 6:
                filtros = {}
                print("\n‚úÖ Filtros limpiados.")
            
            elif opcion == 7:
                return
            
            else:
                print("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")
        
        except ValueError:
            print("‚ùå Por favor, ingresa un n√∫mero v√°lido.")

def menu_configuracion(usuario):
    """
    Men√∫ de configuraci√≥n del perfil del usuario.
    """
    while True:
        print("\n=== ‚öôÔ∏è Configuraci√≥n de Perfil ===")
        print("1. Ver informaci√≥n del perfil")
        print("2. Actualizar nombre")
        print("3. Actualizar correo electr√≥nico")
        print("4. Cambiar contrase√±a")
        print("5. Volver al men√∫ principal")
        
        opcion = input("\nSelecciona una opci√≥n (1-5): ")
        
        if opcion == "1":
            datos = obtener_datos_usuario(usuario['id'])
            if datos:
                print("\n=== Informaci√≥n del Perfil ===")
                print(f"Nombre: {datos['nombre']}")
                print(f"Correo electr√≥nico: {datos['correo']}")
            else:
                print("‚ùå No se pudieron obtener los datos del perfil.")
        
        elif opcion == "2":
            nuevo_nombre = input("\nNuevo nombre: ").strip()
            if nuevo_nombre:
                if actualizar_nombre_usuario(usuario['id'], nuevo_nombre):
                    print("‚úÖ Nombre actualizado correctamente.")
                    usuario['nombre'] = nuevo_nombre  # Actualizar en memoria
                else:
                    print("‚ùå No se pudo actualizar el nombre.")
            else:
                print("‚ùå El nombre no puede estar vac√≠o.")
        
        elif opcion == "3":
            nuevo_correo = input("\nNuevo correo electr√≥nico: ").strip()
            if nuevo_correo and '@' in nuevo_correo:
                if actualizar_correo_usuario(usuario['id'], nuevo_correo):
                    print("‚úÖ Correo electr√≥nico actualizado correctamente.")
                else:
                    print("‚ùå No se pudo actualizar el correo electr√≥nico.")
            else:
                print("‚ùå Por favor, ingresa un correo electr√≥nico v√°lido.")
        
        elif opcion == "4":
            contrase√±a_actual = input("\nContrase√±a actual: ").strip()
            nueva_contrase√±a = input("Nueva contrase√±a: ").strip()
            confirmar_contrase√±a = input("Confirmar nueva contrase√±a: ").strip()
            
            if nueva_contrase√±a and nueva_contrase√±a == confirmar_contrase√±a:
                if actualizar_contrase√±a_usuario(usuario['id'], contrase√±a_actual, nueva_contrase√±a):
                    print("‚úÖ Contrase√±a actualizada correctamente.")
                else:
                    print("‚ùå No se pudo actualizar la contrase√±a.")
            else:
                print("‚ùå Las contrase√±as no coinciden o est√°n vac√≠as.")
        
        elif opcion == "5":
            return
        
        else:
            print("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")

#Funcion principal  
if __name__ == "__main__": 
    usuario_logueado = pantalla_inicio()
    
    if usuario_logueado:
        menu_principal(usuario_logueado)


