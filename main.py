#doc para hacer pruebas
from usuario import registrar_usuario, iniciar_sesion_db
from pareja import crear_pareja
from movimientos import registrar_movimiento_DB

#En esta funcion se encuentra la pantalla principal del progra,a
def pantalla_inicio():
    while True:
        print("\n=== Bienvenido a Finanzas en Pareja üí∞‚ù§Ô∏è ===")
        print("1. Registrarme")
        print("2. Iniciar sesi√≥n")
        print("3. Salir")

        opcion = input("Selecciona una opci√≥n: ")

        if opcion == "1":
            menu_registro_usuarios()

        elif opcion == "2":
            usuario = iniciar_sesion()  # Llamamos la funci√≥n de iniciar_sesion() que no necesita par√°metros
            if usuario:
                print(f"üåü ¬°Bienvenido {usuario['nombre']}!")
                return usuario  # Lo usas para pasar al men√∫ principal

        elif opcion == "3":
            print("üëã Hasta luego.")
            break

        else:
            print("‚ùå Opci√≥n inv√°lida. Intenta de nuevo.")



#En esta funcion se encuentra el menu de navegacion cuando el usuario ingrese
def menu_principal():
    while True:
        print("\n=== Men√∫ Principal ===")
        print("1. Registrar movimiento")
        print("2. Salir")

        opcion = input("Selecciona una opci√≥n: ")

        if opcion == "1":
            registrar_movimiento()  # Esta es una funcion creada para registrar un movimiento
        elif opcion == "2":
            print("üëã Hasta luego")
            break
        else:
            print("‚ùå Opci√≥n inv√°lida, intenta de nuevo.")



def iniciar_sesion():
    correo = input("Correo: ").strip()  # Solicitar correo al usuario
    contrase√±a = input("Contrase√±a: ").strip()  # Solicitar contrase√±a al usuario

    # Aqu√≠ llamas la funci√≥n iniciar_sesion desde usuario.py
    usuario = iniciar_sesion_db(correo, contrase√±a)  # Pasas los datos del correo y contrase√±a a la funci√≥n de usuario.py

    if usuario:
        return usuario  # Si la funci√≥n retorna un usuario v√°lido, lo regresamos
    else:
        print("‚ùå Error en inicio de sesi√≥n. Intenta de nuevo.")
        return None
def menu_registro_usuarios():  # Esta funci√≥n muestra un men√∫ para registrar usuarios
    while True:  # Ciclo que se repite hasta que el usuario decida salir
        print("\n=== Registro de Usuario ===")  # T√≠tulo para identificar el men√∫

        nombre = input("Nombre: ").strip()  # Pedimos el nombre y eliminamos espacios extras
        correo = input("Correo: ").strip()  # Pedimos el correo y eliminamos espacios extras
        contrase√±a = input("Contrase√±a: ").strip()  # Pedimos la contrase√±a y eliminamos espacios extras

        # Validamos que ning√∫n campo est√© vac√≠o
        if not nombre or not correo or not contrase√±a:
            print("‚ùå Todos los campos son obligatorios. Intenta de nuevo.")  # Mensaje de error si falta algo
            continue  # Vuelve al inicio del ciclo

        registrar_usuario(nombre, correo, contrase√±a)  # Llamamos a la funci√≥n que guarda al usuario en la base de datos

        crear_otro = input("¬øTe gustar√≠a crear otro usuario? (s√≠/no): ").strip().lower()  
        # Preguntamos si quiere crear otro usuario, quitamos espacios y pasamos todo a min√∫sculas

        if crear_otro == 'no':  # Si escribe "no", salimos del men√∫
            print("üëã Saliste de la creaci√≥n de usuarios.")  # Mensaje de despedida
            break  # Finalizamos el ciclo while

def pareja_creacion(): #Funcion para crear pareja

    # Pregunta inicial para saber si el usuario quiere crear una pareja
    validacion_1 = input("¬øTe gustar√≠a crear una pareja? (SI/NO): ").strip().lower()

    # Validamos que la respuesta sea afirmativa
    if validacion_1 == 'si':
        # Solicitamos los datos necesarios para crear la pareja
        nombre_pareja = input("Nombre de la pareja: ").strip()
        correo_1 = input("Correo del primer usuario: ").strip()
        correo_2 = input("Correo del segundo usuario: ").strip()

        # Aqu√≠ llamamos la funci√≥n que conecta con la base de datos
        crear_pareja(nombre_pareja, correo_1, correo_2)

    else:
        print("‚ùå El usuario no quiso crear una pareja.")

def registrar_movimiento():
    print("=== Registro de Movimiento ===")

    pareja_id = input("ID de la pareja: ")
    fecha = input("Fecha (YYYY-MM-DD): ")
    categoria = input("Categor√≠a (Ej: Comida, Transporte, etc.): ")
    monto = float(input("Monto: "))
    tipo = input("Tipo (ingreso/gasto): ")
    autor_id = input("ID del autor del movimiento: ")
    descripcion = input("Descripci√≥n del movimiento: ")

    registrar_movimiento_DB(pareja_id, fecha, categoria, monto, tipo, autor_id, descripcion)


if __name__ == "__main__": 
    pantalla_inicio()

